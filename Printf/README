````markdown
# ft_printf

A custom implementation of the C standard `printf` function, built as part of the [42 School](https://42.fr/en/homepage/) curriculum.  
This project focuses on understanding formatted output, variadic functions, and low-level string/number handling in C.

> 🧠 Part of [vinimoura99/42core](https://github.com/vinimoura99/42core)  
> 📁 Explore other projects: [`libft`](https://github.com/vinimoura99/42core/tree/main/libft), [`get_next_line`](https://github.com/vinimoura99/42core/tree/main/get_next_line)

---

## ✅ Supported Format Specifiers

| Specifier | Description                  |
|-----------|------------------------------|
| `%c`      | Character                    |
| `%s`      | String                       |
| `%p`      | Pointer address (hex)        |
| `%d`/`%i` | Signed integer               |
| `%u`      | Unsigned integer             |
| `%x`/`%X` | Unsigned hex (lower/upper)   |
| `%%`      | Literal percent sign         |

---

## 🚀 Getting Started

### 1. Clone and Build

```bash
git clone https://github.com/vinimoura99/42core.git
cd 42core/Printf
make
````

This compiles `libftprintf.a`—a static library you can use in any C project.

### 2. Example Usage

```c
#include "ft_printf.h"

int main(void)
{
    ft_printf("Hello, %s! Here's a number: %d\n", "world", 42);
    return 0;
}
```

Compile it like so:

```bash
gcc main.c libftprintf.a -Iincludes
```

---

## 📂 Project Structure

```
Printf/
├── includes/
│   └── ft_printf.h         # Function prototypes and includes
├── src/
│   ├── ft_printf.c         # Main printf logic and format parsing
│   ├── ft_putnbr_base.c    # Number conversion to base (hex, dec)
│   └── str_utils.c         # Custom string utility functions
├── Makefile                # Build script for the static library
└── .gitignore              # Standard ignores
```

---

## 🧠 Key Concepts

* Use of `va_list`, `va_start`, `va_arg`, and `va_end`
* Manual number-to-string conversion in arbitrary bases
* Handling edge cases in formatting (null strings, pointer alignment)
* Clean modular code separation

---

## 📌 Notes

* Only the functions `write`, `malloc`, and `free` are used (per 42 restrictions)
* Code follows the [42 Norm](https://github.com/42School/norminette)

---

## 📜 License

This project is part of the 42 curriculum and is shared for educational and reference purposes only.

---


